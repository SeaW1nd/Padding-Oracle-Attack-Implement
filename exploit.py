from pwn import *
p = process(["python3", "server.py"])
a = p.recv()
p.sendline(b'1')
print("Your message: ", end='')
Your_input = str(input())
p.sendlineafter(b"Read your input: ", Your_input.encode())
time.sleep(0.3)
b = p.recvline()
iv = p.recvline().decode().strip('\n')
g = p.recvline()
ciphertext = p.recvline().decode().strip('\n')
log.info("Ciphertext: %s", ciphertext)
log.info("IV: %s", iv)
size_cipher = len(ciphertext)
log.info("Size_cipher: %d", size_cipher)
size_block = int(size_cipher / 32)
log.info("Size_block: %d", size_block)
block = []
for i in range(0,size_block):
    block.append(ciphertext[i*32:(i+1)*32])
l = p.recv()
visited = []
plain_block = ""
plaintext = ""
#visited_byte = []
for i in reversed(range(0,size_block-1)):
    temp = block[i]
    split_byte = [temp[index:index+2] for index in range(0,len(temp),2)]
    j = len(split_byte)-1
    temp_arr = ["00"]*16
    dem = 0
    while(j>=0):
        for x in range(0,256):
            p.sendline(b'2')
            te = p.recvline()
            payload = ""
            byte_adjust = temp_arr[j]
            byte_adjust = "{:02x}".format(x)
            temp_arr[j] = byte_adjust
            payload = "".join(block[:i])
            payload += "".join(temp_arr)
            payload += "".join(block[i+1:])
            p.sendline(str(payload).encode())
            time.sleep(0.1)
            msg = p.recvline()
            if b'Message has been decrypted successfully!' in msg:
                #log.success("Leaked bytes: %s", byte_adjust)
                dem = dem+1
                temp = dem+1
                xor3 = dem ^ int(byte_adjust,base=16) ^ int(split_byte[j],base=16)
                plaintext = "{:02x}".format(xor3) + plaintext
                #log.info("original bytes: %s", split_byte[j])
                #log.info("Hex plain text: %s", plaintext)
                c = p.recv()
                visited_byte = [plaintext[v:v+2] for v in range(0,len(plaintext),2)]
                log.success("Leaked plaintext: %s",plaintext)
                for y in range(0,len(visited_byte)):
                    #visited_byte[y] = int(visited_byte[y],base=16)
                    visited_byte[-1-y] = (temp) ^ int(visited_byte[-1-y],base=16) ^ int(split_byte[-1-y],base=16)
                    temp_arr[-1-y] = "{:02x}".format(visited_byte[-1-y])
                    #print(temp_arr)
                j = j-1
                break
            else:
                d = p.recv() 
                continue
    if x!=0:
        visited.append(block[-1])
        block.pop()
    plain_block = plaintext + plain_block
    plaintext = ""
    visited_byte.clear()
#############################################################################################
visited_byte2 = []
plaintext2 = ""
temp2 = block[0]
split_iv = [iv[i:i+2]for i in range(0,len(iv),2)]
j = len(split_iv)-1
temp_arr2 = ["00"]*16
dem = 0
while(j>=0):
    for x in range(0,255):
        p.sendline(b'2')
        te = p.recvline()
        payload = ""
        byte_adjust = temp_arr2[j]
        byte_adjust = "{:02x}".format(x)
        temp_arr2[j] = byte_adjust
        payload += "".join(temp_arr2)
        payload += "".join(block[0])
        # print(temp_arr2)
        # print(split_iv)
        #print(payload)
        # print(str(payload).encode())
        p.sendline(str(payload).encode())
        time.sleep(0.1)
        msg = p.recvline()
        #log.info(msg.decode())
        if b'Message has been decrypted successfully!' in msg:
            #log.success("Leaked bytes: %s", byte_adjust)
            dem = dem+1
            temp = dem+1
            xor3 = dem ^ int(byte_adjust,base=16) ^ int(split_iv[j],base=16)
            plaintext2 = "{:02x}".format(xor3) + plaintext2
            #log.info("original bytes: %s", split_iv[j])
            #log.info("Hex plain text: %s", plaintext2)
            c = p.recv()
            visited_byte2 = [plaintext2[v:v+2] for v in range(0,len(plaintext2),2)]
            log.success("Leaked plaintext (in hex): %s",plaintext2)
            for y in range(0,len(visited_byte2)):
                visited_byte2[-1-y] = (temp) ^ int(visited_byte2[-1-y],base=16) ^ int(split_iv[-1-y],base=16)
                temp_arr2[-1-y] = "{:02x}".format(visited_byte2[-1-y])
                #print(temp_arr2)
            j = j-1
            break
        else:
            d = p.recv() 
            continue
plain_block = plaintext2+plain_block
split = [plain_block[t:t+2]for t in range(0,len(plain_block),2)]
delete_number = int(split[-1],base=16)
for i in range(0,delete_number):
    split.pop()
plain_block = "".join(split)
log.success("Real plaintext: %s", bytearray.fromhex(plain_block).decode())
p.sendline(b'3')
# h = p.recvline()
o = p.recvline()
p.sendline(str(plain_block).encode())
p.interactive()

